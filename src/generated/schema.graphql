### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  accessToken: String
  expiresIn: Int
  user: User
}

input AuthRegisterInput {
  email: String!
  longLived: Boolean
  password: String!
}

type AuthToken {
  createdAt: DateTime!
  expiration: DateTime!
  id: String!
  revoked: Boolean!
  updatedAt: DateTime!
  userId: Int!
}

input AuthTokenCreateManyWithoutUserInput {
  connect: [AuthTokenWhereUniqueInput!]
  connectOrCreate: [AuthTokenCreateOrConnectWithoutUserInput!]
  create: [AuthTokenCreateWithoutUserInput!]
}

input AuthTokenCreateOrConnectWithoutUserInput {
  create: AuthTokenCreateWithoutUserInput!
  where: AuthTokenWhereUniqueInput!
}

input AuthTokenCreateWithoutUserInput {
  createdAt: DateTime
  expiration: DateTime!
  id: String
  revoked: Boolean
  updatedAt: DateTime
}

input AuthTokenScalarWhereInput {
  AND: [AuthTokenScalarWhereInput!]
  createdAt: DateTimeFilter
  expiration: DateTimeFilter
  id: StringFilter
  NOT: [AuthTokenScalarWhereInput!]
  OR: [AuthTokenScalarWhereInput!]
  revoked: BoolFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input AuthTokenUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiration: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  revoked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthTokenUpdateManyWithoutUserInput {
  connect: [AuthTokenWhereUniqueInput!]
  connectOrCreate: [AuthTokenCreateOrConnectWithoutUserInput!]
  create: [AuthTokenCreateWithoutUserInput!]
  delete: [AuthTokenWhereUniqueInput!]
  deleteMany: [AuthTokenScalarWhereInput!]
  disconnect: [AuthTokenWhereUniqueInput!]
  set: [AuthTokenWhereUniqueInput!]
  update: [AuthTokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AuthTokenUpdateManyWithWhereNestedInput!]
  upsert: [AuthTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input AuthTokenUpdateManyWithWhereNestedInput {
  data: AuthTokenUpdateManyDataInput!
  where: AuthTokenScalarWhereInput!
}

input AuthTokenUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiration: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  revoked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthTokenUpdateWithWhereUniqueWithoutUserInput {
  data: AuthTokenUpdateWithoutUserDataInput!
  where: AuthTokenWhereUniqueInput!
}

input AuthTokenUpsertWithWhereUniqueWithoutUserInput {
  create: AuthTokenCreateWithoutUserInput!
  update: AuthTokenUpdateWithoutUserDataInput!
  where: AuthTokenWhereUniqueInput!
}

input AuthTokenWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumMemberTypeFieldUpdateOperationsInput {
  set: MemberType
}

input EnumMemberTypeFilter {
  equals: MemberType
  in: [MemberType!]
  not: NestedEnumMemberTypeFilter
  notIn: [MemberType!]
}

input EnumOrgStatusFieldUpdateOperationsInput {
  set: OrgStatus
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

enum MemberType {
  BORD_MEMBER
  ORG_MEMBER
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  register(data: AuthRegisterInput!): AuthPayload
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumMemberTypeFilter {
  equals: MemberType
  in: [MemberType!]
  not: NestedEnumMemberTypeFilter
  notIn: [MemberType!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input OrganizationCreateOneWithoutMembersInput {
  connect: OrganizationWhereUniqueInput
  connectOrCreate: OrganizationCreateOrConnectWithoutOrgMemberInput
  create: OrganizationCreateWithoutMembersInput
}

input OrganizationCreateOrConnectWithoutOrgMemberInput {
  create: OrganizationCreateWithoutMembersInput!
  where: OrganizationWhereUniqueInput!
}

input OrganizationCreateWithoutMembersInput {
  createdAt: DateTime
  status: OrgStatus
  updatedAt: DateTime
  verifiedAt: DateTime
}

input OrganizationUpdateOneRequiredWithoutMembersInput {
  connect: OrganizationWhereUniqueInput
  connectOrCreate: OrganizationCreateOrConnectWithoutOrgMemberInput
  create: OrganizationCreateWithoutMembersInput
  update: OrganizationUpdateWithoutMembersDataInput
  upsert: OrganizationUpsertWithoutMembersInput
}

input OrganizationUpdateWithoutMembersDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumOrgStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verifiedAt: NullableDateTimeFieldUpdateOperationsInput
}

input OrganizationUpsertWithoutMembersInput {
  create: OrganizationCreateWithoutMembersInput!
  update: OrganizationUpdateWithoutMembersDataInput!
}

input OrganizationWhereUniqueInput {
  id: Int
}

input OrgMemberCreateManyWithoutUserInput {
  connect: [OrgMemberWhereUniqueInput!]
  connectOrCreate: [OrgMemberCreateOrConnectWithoutUserInput!]
  create: [OrgMemberCreateWithoutUserInput!]
}

input OrgMemberCreateOrConnectWithoutUserInput {
  create: OrgMemberCreateWithoutUserInput!
  where: OrgMemberWhereUniqueInput!
}

input OrgMemberCreateWithoutUserInput {
  joined: DateTime
  memberType: MemberType!
  organization: OrganizationCreateOneWithoutMembersInput!
  permissions: PermissionCreateManyWithoutOrgmembersInput
  updatedAt: DateTime
}

input OrgMemberScalarWhereInput {
  AND: [OrgMemberScalarWhereInput!]
  id: IntFilter
  joined: DateTimeFilter
  memberType: EnumMemberTypeFilter
  NOT: [OrgMemberScalarWhereInput!]
  OR: [OrgMemberScalarWhereInput!]
  organizationId: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input OrgMemberUpdateManyDataInput {
  joined: DateTimeFieldUpdateOperationsInput
  memberType: EnumMemberTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrgMemberUpdateManyWithoutUserInput {
  connect: [OrgMemberWhereUniqueInput!]
  connectOrCreate: [OrgMemberCreateOrConnectWithoutUserInput!]
  create: [OrgMemberCreateWithoutUserInput!]
  delete: [OrgMemberWhereUniqueInput!]
  deleteMany: [OrgMemberScalarWhereInput!]
  disconnect: [OrgMemberWhereUniqueInput!]
  set: [OrgMemberWhereUniqueInput!]
  update: [OrgMemberUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OrgMemberUpdateManyWithWhereNestedInput!]
  upsert: [OrgMemberUpsertWithWhereUniqueWithoutUserInput!]
}

input OrgMemberUpdateManyWithWhereNestedInput {
  data: OrgMemberUpdateManyDataInput!
  where: OrgMemberScalarWhereInput!
}

input OrgMemberUpdateWithoutUserDataInput {
  joined: DateTimeFieldUpdateOperationsInput
  memberType: EnumMemberTypeFieldUpdateOperationsInput
  organization: OrganizationUpdateOneRequiredWithoutMembersInput
  permissions: PermissionUpdateManyWithoutOrgmembersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrgMemberUpdateWithWhereUniqueWithoutUserInput {
  data: OrgMemberUpdateWithoutUserDataInput!
  where: OrgMemberWhereUniqueInput!
}

input OrgMemberUpsertWithWhereUniqueWithoutUserInput {
  create: OrgMemberCreateWithoutUserInput!
  update: OrgMemberUpdateWithoutUserDataInput!
  where: OrgMemberWhereUniqueInput!
}

input OrgMemberWhereUniqueInput {
  id: Int
}

enum OrgStatus {
  ACTIVE
  INACTIVE
}

input PermissionCreateManyWithoutOrgmembersInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutOrgMemberInput!]
  create: [PermissionCreateWithoutOrgmembersInput!]
}

input PermissionCreateOrConnectWithoutOrgMemberInput {
  create: PermissionCreateWithoutOrgmembersInput!
  where: PermissionWhereUniqueInput!
}

input PermissionCreateWithoutOrgmembersInput {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

input PermissionScalarWhereInput {
  AND: [PermissionScalarWhereInput!]
  code: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [PermissionScalarWhereInput!]
  OR: [PermissionScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input PermissionUpdateManyDataInput {
  code: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PermissionUpdateManyWithoutOrgmembersInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutOrgMemberInput!]
  create: [PermissionCreateWithoutOrgmembersInput!]
  delete: [PermissionWhereUniqueInput!]
  deleteMany: [PermissionScalarWhereInput!]
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueWithoutOrgmembersInput!]
  updateMany: [PermissionUpdateManyWithWhereNestedInput!]
  upsert: [PermissionUpsertWithWhereUniqueWithoutOrgmembersInput!]
}

input PermissionUpdateManyWithWhereNestedInput {
  data: PermissionUpdateManyDataInput!
  where: PermissionScalarWhereInput!
}

input PermissionUpdateWithoutOrgmembersDataInput {
  code: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PermissionUpdateWithWhereUniqueWithoutOrgmembersInput {
  data: PermissionUpdateWithoutOrgmembersDataInput!
  where: PermissionWhereUniqueInput!
}

input PermissionUpsertWithWhereUniqueWithoutOrgmembersInput {
  create: PermissionCreateWithoutOrgmembersInput!
  update: PermissionUpdateWithoutOrgmembersDataInput!
  where: PermissionWhereUniqueInput!
}

input PermissionWhereUniqueInput {
  id: Int
}

type Query {
  authToken(where: AuthTokenWhereUniqueInput!): AuthToken
  authTokens(after: AuthTokenWhereUniqueInput, before: AuthTokenWhereUniqueInput, first: Int, last: Int): [AuthToken!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  authTokens(after: AuthTokenWhereUniqueInput, before: AuthTokenWhereUniqueInput, first: Int, last: Int): [AuthToken!]!
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  id: Int!
  lastLogged: DateTime
  lastName: String
  locale: String!
  password: String!
  status: UserStatus!
  updatedAt: DateTime!
}

input UserCreateInput {
  authTokens: AuthTokenCreateManyWithoutUserInput
  createdAt: DateTime
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  lastLogged: DateTime
  lastName: String
  locale: String!
  orgMembers: OrgMemberCreateManyWithoutUserInput
  password: String!
  phoneNumber: String
  status: UserStatus
  updatedAt: DateTime
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

input UserUpdateInput {
  authTokens: AuthTokenUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastLogged: NullableDateTimeFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  orgMembers: OrgMemberUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
