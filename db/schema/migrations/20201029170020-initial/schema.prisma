generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["connectOrCreate", "transactionApi"]
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  status          UserStatus  @default(ACTIVE)
  email           String      @unique
  password        String
  firstName       String?
  lastName        String?
  phoneNumber     String?
  locale          String
  emailVerifiedAt DateTime?
  lastLogged      DateTime?
  authTokens      AuthToken[]
  orgMembers      OrgMember[]
}

model AuthToken {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  revoked    Boolean  @default(false)
  expiration DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Permission {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String?
  code       String?
  orgmembers OrgMember[]
}

model Organization {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrgStatus   @default(ACTIVE)
  verifiedAt DateTime?
  members    OrgMember[]
}

model OrgMember {
  id             Int          @id @default(autoincrement())
  joined         DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  memberType     MemberType
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  permissions    Permission[]
}

enum MemberType {
  BORD_MEMBER
  ORG_MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum OrgStatus {
  ACTIVE
  INACTIVE
}
